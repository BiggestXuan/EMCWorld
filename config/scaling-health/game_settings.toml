
[item]

	[item.cursed_heart]
		#Change in difficulty when a cursed heart is used
		change = 0.0

	[item.enchanted_heart]
		#Change in difficulty when an enchanted heart is used
		change = 0.0

	[item.chance_heart]
		#Change in difficulty when a chance heart is used
		#For a value n, a chance heart has 1 in 2n + 1 chance of being cursed
		#In that case, n difficulty is added (n = 10, 1 in 21 chance to get +10)
		#There's a 2 in 2n + 1 chance for 1 to n difficulty to be subtracted (n = 3, 2 in 7 chance of getting -1, -2, or -3
		change = 0.0

	[item.heart_crystal]
		#The amount of additional health restored by heart crystals.
		#Heart crystals always restore the amount of health they add, this is a bonus
		healthRestored = 4.0
		#The number of levels required to use a heart crystal.
		levelCost = 15
		#How much hearts a player will gain using a heart crystal.
		healthBoost = 1

	[item.power_crystal]
		#The number of levels required to use a power crystal.
		levelCost = 15
		#How much more damage a player deals after using a power crystal.
		damageBoost = 0.1

[mob]

	#Mob health settings
	[mob.health]
		#Determines how difficulty affects mob health.
		#2 types of modes: Multiplier and additive, with 3 different multipliers.
		#MULTI: Mob hp is multiplied, mobs with higher base hp have more increase.
		#MULTI_HALF: Same as MULTI but mobs with more than 20 hp have reduced scaling (bosses, endermen, witches, etc).
		#MULTI_QUARTER: Same as MULTI_HALF but scaling is reduced further for 20hp+ mobs.
		#ADD: Flat increase for all mobs, no matter their base hp.
		modifierMode = "MULTI_HALF"
		#This modifier affects the hp scale of mobs spawned by spawners, a normal 100 hp boost, will be of 30 using default value
		spawner = 0.23

		[mob.health.multiplier]
			passive = 0.15
			hostile = 0.15

	[mob.damage]
		#How rapidly mob attack damage rises with difficulty (0 = no damage boost)
		boostScale = 0.1
		#The maximum extra attack damage a mob can receive
		maxBoost = 10.0

	[mob.xp]
		#Xp scaling multiplied by difficulty - xp scale of 0.1 with difficulty 10 will give about 11x more xp
		Boost = 0.03

	[mob.blight]
		#Chance that the mob has of becoming a blight - 0 will effectively deactivate blight
		#The equation is : chance * difficulty/maxDifficulty
		#meaning at 20% of maxDiff there is chance/5 chances of the mob being blight 1% using default value
		chance = 0.05
		#Notify everyone that a blight died in combat
		notifyOnDeath = false
		#Xp scaling for blights, 3 will give 3 more times more xp then another mob on the same difficulty
		maxBoost = 3.0
		#Multiplier for blight difficulty, 2 will make blights have stats equal to 2 * current difficulty
		blightModifier = 2.0

		[[mob.blight.potionEffects]]
			potion = "minecraft:fire_resistance"
			level = 1
			minDifficulty = 0
			durationInMinutes = 5.0

		[[mob.blight.potionEffects]]
			potion = "minecraft:resistance"
			level = 1
			minDifficulty = 0
			durationInMinutes = 5.0

		[[mob.blight.potionEffects]]
			potion = "minecraft:speed"
			level = 4
			minDifficulty = 0
			durationInMinutes = 5.0

		[[mob.blight.potionEffects]]
			potion = "minecraft:strength"
			level = 2
			minDifficulty = 0
			durationInMinutes = 5.0

	#Chance for mobs to receive a random potion effect (assuming their difficulty is high enough)
	[mob.potionChance]
		hostile = 0.155
		peaceful = 0.025

	[[mob.randomPotionEffects]]
		potion = "minecraft:speed"
		level = 1
		minDifficulty = 15
		durationInMinutes = 10.0

	[[mob.randomPotionEffects]]
		potion = "minecraft:speed"
		level = 2
		minDifficulty = 50
		durationInMinutes = 10.0

	[[mob.randomPotionEffects]]
		potion = "minecraft:strength"
		level = 1
		minDifficulty = 30
		durationInMinutes = 10.0

	[[mob.randomPotionEffects]]
		potion = "minecraft:fire_resistance"
		level = 1
		minDifficulty = 10
		durationInMinutes = 10.0

	[[mob.randomPotionEffects]]
		potion = "minecraft:resistance"
		level = 1
		minDifficulty = 40
		durationInMinutes = 10.0

#Settings for players
[player]

	[player.health]
		#Starting player health, in half-hearts (20 = 10 hearts)
		startingHealth = 20
		#The minimum amount of health a player can have (this can be lower than starting health)
		minHealth = 2
		#The highest max health a player can reach, not considering the vanilla
		# health cap and modifiers from other sources. 0 means 'unlimited'.
		maxHealth = 40
		#EvalEx expression: On death, set the player's max health to this value. By default, there is no change.
		setOnDeath = "maxHealth"

		#settings for hp scaling by xp level
		[player.health.xp]
			#How many levels it takes for an hp increase
			levelAmount = 3
			#On hp increase, how much hp is gained
			hpAmount = 1

	[player.attackDamage]
		#The highest attack damage a player can achieve, not considering the vanilla
		#cap and modifiers from other sources. 0 means 'unlimited'.
		maxValue = 0

	#Regen config
	#enabled -- Quick toggle for regen
	#initialDelay -- Time in seconds after taking damage before regen begins
	#tickDelay -- Time in seconds between healing ticks
	#exhaustion -- Food consumed per healing tick
	#proportionalToMaxHealth -- If true, healing scales with max health. Otherwise, heals 1 health per healing tick
	#minFood -- Minimum food required for regen to be active
	#maxFood -- Maximum food at which regen will be active
	#minHealth -- Minimum health required for regen to be active
	#maxHealth -- Maximum health at which regen will be active
	[player.regen]
		enabled = true
		initialDelay = 20.0
		tickDelay = 5.0
		exhaustion = 0.1
		minFood = 10
		maxFood = 2147483647
		minHealth = 0
		maxHealth = 2147483647
		proportionalToMaxHealth = false

#Settings for tamed creatures
[pets]
	#Delay (in seconds) between regen ticks for pets. Set 0 to disable.
	regenDelay = 0.0
	#Define the amount of hp a tamed ped will gain when right clicking with a heart crystal.
	hpGain = 5.0

#Settings related to difficulty. Difficulty determines various things, such as how much health mobs have.
[difficulty]
	#These players will not gain difficulty. Use either name or UUID.
	#Note: if non-exempt players are nearby, mobs will still be stronger.
	exemptPlayers = []
	#The initial player difficulty value for newly spawned players.
	startingValue = 0.0
	#The minimum difficulty value a player can have. This can be smaller from startingValue.
	minValue = 0.0
	#The maximum difficulty value a player can have.
	maxValue = 1500.0
	#Every second, this value is added to player and dimension difficulty.
	#Enter a negative number to subtract difficulty instead.
	changePerSecond = 0.0
	#Distance-based area modes will multiply distance by this value to get difficulty
	distanceFactor = 0.0
	#Determines how difficulty is calculated.
	#WEIGHTED_AVERAGE:
	#weighted average of players difficulty based on distance - players further away from an area will have less of an impact
	#AVERAGE:
	#Takes the average difficulty of nearby players
	#MIN_LEVEL:
	#Lowest difficulty of all nearby players
	#MAX_LEVEL:
	#Highest difficulty of all nearby players
	#DISTANCE_FROM_SPAWN:
	#Difficulty increases further away from world spawn, see distanceFactor config above.
	#DISTANCE_FROM_ORIGIN:
	#Same as DISTANCE_FROM_SPAWN but from (0, 0, 0)
	#DISTANCE_AND_TIME:
	#Mix of WEIGHTED_AVERAGE and DISTANCE_FROM_SPAWN. Difficulty increases with time but also with distance
	#SERVER_WIDE:
	#Difficulty tracked at the server level. Player difficulty is irrelevant.
	areaMode = "WEIGHTED_AVERAGE"
	#Distance to look for difficulty sources (players) when calculating area difficulty.
	searchRadius = 256
	#Ignore the Y-axis in difficulty calculations
	ignoreYAxis = true
	#EvalEx expression: A multiplier for area difficulty calculations, typically based on the number of players in the search radius.
	groupAreaBonus = "1 + 0.05 * (areaPlayerCount - 1)"
	#Message displayed to the player when sleeping, assuming it would change their difficulty.
	#If left empty, the default message is pulled from the translation file.
	sleepWarningMessage = ""

	[difficulty.afk]
		#Multiplier for changePerSecond when the player is not moving. A negative value will then decrease difficulty.
		multiplier = 0.5
		#If true, a comment will appear to notify when you are considered afk
		message = false
		#Time in seconds before afk change kicks in
		time = 120.0

	#Change difficulty when certain things happen
	#putting in -difficulty- produces no change, putting 0 will reset difficulty after this action
	[difficulty.mutators]
		#EvalEx expression: A blight is killed by a player
		onBlightKilled = "difficulty"
		#EvalEx expression: A boss is killed by a player
		onBossKilled = "difficulty"
		#EvalEx expression: A normal hostile mob is killed by a player
		onHostileKilled = "difficulty"
		#EvalEx expression: A peaceful mob is killed by a player
		onPeacefulKilled = "difficulty"
		#EvalEx expression: A player killed another player
		onPlayerKilled = "difficulty"
		#EvalEx expression: A player dies
		onPlayerDeath = "difficulty"
		#EvalEx expression: A player sleeps in a bed
		onPlayerSleep = "difficulty"

		[[difficulty.mutators.byEntity]]
			types = ["minecraft:villager"]
			onKilled = "difficulty + 0.01"

	[difficulty.multipliers]

		#Allows difficulty to be changed based on the moon phase. values must have 8 elements.
		#The first is full moon, the fifth is new moon.
		#'enabled' must be set to true for this to work.
		[difficulty.multipliers.lunarCycles]
			enabled = false
			values = [1.5, 1.3, 1.2, 1.0, 0.8, 1.0, 1.2, 1.3]

		#Set difficulty multipliers based on location. You can match dimensions, biomes, or both.
		#If either the biomes or dimensions array is empty, it is ignored (matching all)
		[[difficulty.multipliers.byLocation]]
			biomes = ["modid:example"]
			dimensions = ["overworld"]
			scale = 1.0

#Set damage scaling by damage source. No scaling is done by default.
#Mod sources can be added too, you'll just need the damage type string. The number represents how steeply the damage scales.
#0 means no scaling (vanilla), 1 means it will be proportional to difficulty/max health (whichever you set).
#The scale can be any non-negative number, including numbers greater than one.
[damageScaling]
	#How sharply damage scales with difficulty.
	difficultyWeight = 0.04
	#Scale for all damage types which does not have a specific scale defined.
	#This can have unintended side effects, so it's recommended to leave this at 0.
	genericScale = 0.0
	#Does damage scaling affect hostile mobs?
	affectHostiles = true
	#Does damage scaling affect peaceful mobs (animals)?
	affectPeacefuls = false
	#give the modid of a mod to negate ALL damage scaling in the mod
	blacklistMods = ["modid", "othermodid"]
	#Damage scaling mode
	#Valid values: MAX_HEALTH, DIFFICULTY, AREA_DIFFICULTY
	mode = "MAX_HEALTH"

	[[damageScaling.damageTypes]]
		types = ["cactus"]
		scale = 0.0

